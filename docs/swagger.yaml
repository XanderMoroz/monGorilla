definitions:
  models.CreateUserBody:
    properties:
      location:
        type: string
      name:
        type: string
      title:
        type: string
    required:
    - location
    - name
    - title
    type: object
  models.User:
    properties:
      id:
        type: string
      location:
        type: string
      name:
        type: string
      title:
        type: string
    required:
    - location
    - name
    - title
    type: object
host: 127.0.0.1:8080/
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server on Gorrilla Mux + MongoDB.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: MonGorilla Project
  version: "1.0"
paths:
  /api/users:
    get:
      description: Get all users from db
      operationId: get-all-users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: get all users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Creating User in DB with given request body
      operationId: create-new-user
      parameters:
      - description: Enter user data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: create new user
      tags:
      - Users
  /api/users/{id}:
    delete:
      description: Delete a user by ID
      operationId: delete-user-by-id
      parameters:
      - description: UserID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "404":
          description: Not Found
          schema:
            items:
              type: string
            type: array
      summary: delete a user by ID
      tags:
      - Users
    get:
      description: Get a user by ID
      operationId: get-user-by-id
      parameters:
      - description: UserID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            items:
              type: string
            type: array
      summary: get a user by ID
      tags:
      - Users
    put:
      description: Update user by ID
      operationId: update-user-by-id
      parameters:
      - description: UserID
        in: path
        name: id
        required: true
        type: string
      - description: Введите новые данные пользователя
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "404":
          description: Not Found
          schema:
            items:
              type: string
            type: array
      summary: update user by ID
      tags:
      - Users
swagger: "2.0"
